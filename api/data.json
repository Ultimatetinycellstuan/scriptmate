{
    "Categories": [
        {
            "Title": "Episode 1",
            "Subtitle": "Introduction",
            "BackgroundImage": "http://www.roblox.com/asset/?id=9831217083",
            "GridPlacement": "001",
            "Template": "-- Before completing this exercise, please watch the episode below.\n-- Have feedback? Feel free to send me a tweet @ twitter.com/jotslo\n-- EPISODE 1: https://youtube.com/watch?v=abcdefghij\n\n",
            "Content": [
                {
                    "Type": "Exercise",
                    "Title": "String Declaration",
                    "Description": "In the script editor, declare a variable named <font color=\"rgb(85,170,255)\">myName</font> and assign it to your own name.\n\nAfterwards, run your code with the <b>Test Code</b> button below.\n\nIf you're unsure, press the <b>Reveal Hint</b> button.\n\nMake sure you have opened the <b>Output</b> window, so you can see errors.",
                    "Hint": "You can write text with a string, which is wrapped in \"quotation marks\".",
                    "Validator": "return typeof(myName) == 'string'",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Number Declaration",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myNumber</font> and assign it to a number.\n\nThe number must use a <b>decimal</b>, meaning it cannot be a whole number.",
                    "Hint": "Numbers are <b>not</b> wrapped in quotation marks, as they are <b>not</b> strings.",
                    "Validator": "return typeof(myNumber) == 'number' and myNumber % 1 ~= 0",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Boolean Declaration",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myBoolean</font> and assign it to any Boolean value.",
                    "Hint": "Booleans are either <b>true</b> or <b>false</b>, and must not be wrapped in quotation marks.",
                    "Validator": "return typeof(myBoolean) == 'boolean'",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Outputting Variables",
                    "Description": "Declare a variable with any name and assign it to a <b>string</b>.\n\nThen, use the <font color=\"rgb(85,170,255)\">print</font> function to output the variable's value.",
                    "Hint": "After assigning your variable, you can call the <b>print</b> function by typing <b>print</b>, followed by round brackets containing the variable's name.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() log = log[#log].message for var, value in getfenv() do if typeof(value) == 'string' and typeof(log) == 'string' then if log:find(value) then return true end end end return false",
                    "ScriptValidator": "local c = (userCode:gsub('%s', '')) return c:find('=') ~= nil and c:find('print%(') ~= nil and c:find('print%(\"') == nil and c:find(\"print%('\") == nil and c:find('print%[%[') == nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Basic Addition",
                    "Description": "It's Josh's birthday tomorrow! ðŸ¥³\n\nDeclare a variable named <font color=\"rgb(85,170,255)\">joshAge</font> and assign it to <b>19</b>.\n\nNext, use the <font color=\"rgb(85,170,255)\">print</font> function to output his <b>age tomorrow</b>.",
                    "Hint": "Josh will be 20 years old tomorrow. You can use the addition operator to add two numbers together.",
                    "Validator": "if typeof(joshAge) ~= 'number' then return false end wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('20') then return true end return false",
                    "ScriptValidator": "return userCode:find('19') ~= nil and userCode:find('+') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Order of Operations",
                    "Description": "Come up with any expression, as complex as you would like, that outputs <b>100</b>.\n\n<b>Examples:</b>\n<font face=\"Code\">print(10 ^ 2)\nprint(9 * 9 + 9 * 2 + 1)\nprint((30 - 5) * 2 + 50)</font>\n\nBonus points if you use <b>variables</b>, <b>order of operations</b> and <b>brackets</b>!",
                    "Hint": "You can complete this challenge however you like, it is simply designed to let you experiment. Even <font face=\"Code\">print(100)</font> will work!",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('100') then return true end return false",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Quiz",
                    "Questions": [
                        {
                            "Question": "Which of these is <b>not</b> a valid data type in Luau?",
                            "Answer": "Text",
                            "False1": "String",
                            "False2": "Number",
                            "False3": "Boolean"
                        },
                        {
                            "Question": "Which of these variable names is written in camel case?",
                            "Answer": "variableName",
                            "False1": "VariableName",
                            "False2": "variable_name",
                            "False3": "VARIABLE_NAME"
                        },
                        {
                            "Question": "Which operator concatenates two strings?",
                            "Answer": "..",
                            "False1": "&",
                            "False2": "+",
                            "False3": "-"
                        },
                        {
                            "Question": "What happens if you declare a variable <i>after</i> outputting it?",
                            "Answer": "The output window shows 'nil'",
                            "False1": "The script crashes",
                            "False2": "The output window shows the variable's value",
                            "False3": "The output window shows 'undefined'"
                        },
                        {
                            "Question": "Which of these scripts will cause an error?",
                            "Answer": "<font face=\"Code\">1var = true</font>",
                            "False1": "<font face=\"Code\">var3 = [[false]]</font>",
                            "False2": "<font face=\"Code\">MY_VAR = 'yes'</font>",
                            "False3": "<font face=\"Code\">v4r = 9.6</font>"
                        }
                    ]
                }
            ]
        },
        {
            "Title": "Episode 2",
            "Subtitle": "If Statements",
            "BackgroundImage": "http://www.roblox.com/asset/?id=9831217083",
            "GridPlacement": "002",
            "Template": "-- Before completing this exercise, please watch the episode below.\n-- Have feedback? Feel free to send me a tweet @ twitter.com/jotslo\n-- EPISODE 2: https://youtube.com/watch?v=abcdefghij\n\n",
            "Content": [
                {
                    "Type": "Exercise",
                    "Title": "Basic Comparison",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myBoolean</font>, and assign to any Boolean value by comparing two values.\n\nFinally, output the contents of the variable.\n\nYour script must not contain keywords <b>true</b> or <b>false</b>.",
                    "Hint": "You can compare two values with the equality operator (<b>==</b>), or any other operators mentioned in the tutorial.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('true') or log[#log].message:find('false') then return typeof(myBoolean) == 'boolean' end return false",
                    "ScriptValidator": "return userCode:find('true') == nil and userCode:find('false') == nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "If Statement",
                    "Description": "Create an if statement that checks if 10 is <b>greater than or equal to</b> 5.\n\nIf it is, output the string <b>'Success'</b>",
                    "Hint": "The greater than or equal to operator (<b>&gt;=</b>) is used to check if one value is greater than or equal to another.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:lower():find('success') then return true end return false",
                    "ScriptValidator": "return userCode:find('>=') ~= nil and userCode:find('10') ~= nil and userCode:find('5') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Else Block",
                    "Description": "Create an if statement that checks if 8 is <b>less than</b> 3.\n\nIf it is, output the string <b>'Success'</b>\n\nOtherwise, output the string <b>'Failure'</b>",
                    "Hint": "You should use an else block, which is an extension to the if statement. The else block runs when no conditions in the if statement are met.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:lower():find('failure') then return true end return false",
                    "ScriptValidator": "return userCode:find('<') ~= nil and userCode:find('8') ~= nil and userCode:find('3') ~= nil and userCode:find('else') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Elseif Block",
                    "Description": "Create an if statement with <b>at least</b> one <b>elseif</b> block, and one <b>else</b> block.\n\nFeel free to try this challenge multiple times, to try out different formats.\n\nRemember blocks underneath the first block with a truthy condition will be ignored.",
                    "Hint": "If any blocks within an if statement are truthy, the computer runs the code within its block and ignores the remaining blocks. Feel free to rewatch the tutorial if unsure.",
                    "Validator": "return true",
                    "ScriptValidator": "return userCode:find('if') ~= nil and userCode:find('else ') ~= nil and userCode:find('elseif') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Local Variables",
                    "Description": "Create an if statement that executes, and declare a <b>local</b> variable named <font color=\"rgb(85,170,255)\">myVar</font> inside of its scope.\n\nThe variable should be assigned to the number <b>13</b>\n\nIn the if statement's scope, output the variable's value.\n\nOutside the if statement's scope after running, output the variable's value again, where it should not have a value.",
                    "Hint": "Local variables can only be accessed inside of a scope. If you declare a variable inside the if statement, it will not have a value outside of it, and so should output nil.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if myVar then return false end if log[#log-1].message:lower():find('13') and log[#log].message:lower():find('nil') then return true end return false",
                    "ScriptValidator": "return userCode:find('myVar') and not userCode:find('print(\\'') and not userCode:find('print(\"')"
                },
                {
                    "Type": "Quiz",
                    "Questions": [
                        {
                            "Question": "Which of these represents <b>less than or equal to</b>?",
                            "Answer": "&lt;=",
                            "False1": "&lt;",
                            "False2": "&gt;=",
                            "False3": "&gt;"
                        },
                        {
                            "Question": "What does the local keyword do?",
                            "Answer": "Makes a variable local to a specific scope",
                            "False1": "Makes a variable accessible from a LocalScript",
                            "False2": "Stops a variable from being accessed in other scripts",
                            "False3": "Nothing, it is entirely optional"
                        },
                        {
                            "Question": "What does this condition return?\n<font face=\"Code\">(3 == 3 or 4 &lt; 3) and true</font>",
                            "Answer": "true",
                            "False1": "false",
                            "False2": "nil",
                            "False3": "The script errors"
                        },
                        {
                            "Question": "When does the code within an else block run?",
                            "Answer": "When all other blocks in the if statement are falsy",
                            "False1": "After running the first code block in the if statement",
                            "False2": "Never",
                            "False3": "After running the code within an elseif block"
                        },
                        {
                            "Question": "Why do we use tabs/spaces to indent code?",
                            "Answer": "It makes the code easier to read",
                            "False1": "Scopes must be indented",
                            "False2": "Indentation makes the script run faster",
                            "False3": "I don't know"
                        }
                    ]
                }
            ]
        }
    ]
}
