{
    "Categories": [
        {
            "Title": "Episode 1",
            "Subtitle": "Introduction",
            "BackgroundImage": "http://www.roblox.com/asset/?id=9831217083",
            "GridPlacement": "001",
            "Template": "-- Before completing this exercise, please watch the episode below.\n-- Have feedback? Feel free to send me a tweet @ twitter.com/jotslo\n-- EPISODE 1: https://youtube.com/watch?v=abcdefghij\n\n",
            "Content": [
                {
                    "Type": "Exercise",
                    "Title": "String Declaration",
                    "Description": "In the script editor, declare a variable named <font color=\"rgb(85,170,255)\">myName</font> and assign it to your own name.\n\nAfterwards, run your code with the <b>Test Code</b> button below.\n\nIf you're unsure, press the <b>Reveal Hint</b> button.\n\nMake sure you have opened the <b>Output</b> window, so you can see errors.",
                    "Hint": "You can write text with a string, which is wrapped in \"quotation marks\".",
                    "Validator": "return typeof(myName) == 'string'",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Number Declaration",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myNumber</font> and assign it to a number.\n\nThe number must use a <b>decimal</b>, meaning it cannot be a whole number.",
                    "Hint": "Numbers are <b>not</b> wrapped in quotation marks, as they are <b>not</b> strings.",
                    "Validator": "return typeof(myNumber) == 'number' and myNumber % 1 ~= 0",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Boolean Declaration",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myBoolean</font> and assign it to any Boolean value.",
                    "Hint": "Booleans are either <b>true</b> or <b>false</b>, and must not be wrapped in quotation marks.",
                    "Validator": "return typeof(myBoolean) == 'boolean'",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Exercise",
                    "Title": "Outputting Variables",
                    "Description": "Declare a variable with any name and assign it to a <b>string</b>.\n\nThen, use the <font color=\"rgb(85,170,255)\">print</font> function to output the variable's value.",
                    "Hint": "After assigning your variable, you can call the <b>print</b> function by typing <b>print</b>, followed by round brackets containing the variable's name.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() log = log[#log].message for var, value in getfenv() do if typeof(value) == 'string' and typeof(log) == 'string' then if log:find(value) then return true end end end return false",
                    "ScriptValidator": "local c = (userCode:gsub('%s', '')) return c:find('=') ~= nil and c:find('print%(') ~= nil and c:find('print%(\"') == nil and c:find(\"print%('\") == nil and c:find('print%[%[') == nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Basic Addition",
                    "Description": "It's Josh's birthday tomorrow! ðŸ¥³\n\nDeclare a variable named <font color=\"rgb(85,170,255)\">joshAge</font> and assign it to <b>19</b>.\n\nNext, use the <font color=\"rgb(85,170,255)\">print</font> function to output his <b>age tomorrow</b>.",
                    "Hint": "Josh will be 20 years old tomorrow. You can use the addition operator to add two numbers together.",
                    "Validator": "if typeof(joshAge) ~= 'number' then return false end wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('20') then return true end return false",
                    "ScriptValidator": "return userCode:find('19') ~= nil and userCode:find('+') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Order of Operations",
                    "Description": "Come up with any expression, as complex as you would like, that outputs <b>100</b>.\n\n<b>Examples:</b>\n<font face=\"Code\">print(10 ^ 2)\nprint(9 * 9 + 9 * 2 + 1)\nprint((30 - 5) * 2 + 50)</font>\n\nBonus points if you use <b>variables</b>, <b>order of operations</b> and <b>brackets</b>!",
                    "Hint": "You can complete this challenge however you like, it is simply designed to let you experiment. Even <font face=\"Code\">print(100)</font> will work!",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('100') then return true end return false",
                    "ScriptValidator": "return true"
                },
                {
                    "Type": "Quiz",
                    "Questions": [
                        {
                            "Question": "Which of these is <b>not</b> a valid data type in Luau?",
                            "Answer": "Text",
                            "False1": "String",
                            "False2": "Number",
                            "False3": "Boolean"
                        },
                        {
                            "Question": "Which of these variable names is written in camel case?",
                            "Answer": "variableName",
                            "False1": "VariableName",
                            "False2": "variable_name",
                            "False3": "VARIABLE_NAME"
                        },
                        {
                            "Question": "Which operator concatenates two strings?",
                            "Answer": "..",
                            "False1": "&",
                            "False2": "+",
                            "False3": "-"
                        },
                        {
                            "Question": "What happens if you declare a variable <i>after</i> outputting it?",
                            "Answer": "The output window shows 'nil'",
                            "False1": "The script crashes",
                            "False2": "The output window shows the variable's value",
                            "False3": "The output window shows 'undefined'"
                        },
                        {
                            "Question": "Which of these scripts will cause an error?",
                            "Answer": "<font face=\"Code\">1var = true</font>",
                            "False1": "<font face=\"Code\">var3 = [[false]]</font>",
                            "False2": "<font face=\"Code\">MY_VAR = 'yes'</font>",
                            "False3": "<font face=\"Code\">v4r = 9.6</font>"
                        }
                    ]
                }
            ]
        },
        {
            "Title": "Episode 2",
            "Subtitle": "If Statements",
            "BackgroundImage": "http://www.roblox.com/asset/?id=9831217083",
            "GridPlacement": "002",
            "Template": "-- Before completing this exercise, please watch the episode below.\n-- Have feedback? Feel free to send me a tweet @ twitter.com/jotslo\n-- EPISODE 2: https://youtube.com/watch?v=abcdefghij\n\n",
            "Content": [
                {
                    "Type": "Exercise",
                    "Title": "Basic Comparison",
                    "Description": "Declare a variable named <font color=\"rgb(85,170,255)\">myBoolean</font>, and assign to any Boolean value by comparing two values.\n\nFinally, output the contents of the variable.\n\nYour script must not contain keywords <b>true</b> or <b>false</b>.",
                    "Hint": "You can compare two values with the equality operator (<b>==</b>), or any other operators mentioned in the tutorial.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:find('true') or log[#log].message:find('false') then return typeof(myBoolean) == 'boolean' end return false",
                    "ScriptValidator": "return userCode:find('true') == nil and userCode:find('false') == nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "If Statement",
                    "Description": "Create an if statement that checks if 10 is <b>greater than or equal to</b> 5.\n\nIf it is, output the string <b>'Success'</b>",
                    "Hint": "The greater than or equal to operator (<b>&gt;=</b>) is used to check if one value is greater than or equal to another.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:lower():find('success') then return true end return false",
                    "ScriptValidator": "return userCode:find('>=') ~= nil and userCode:find('10') ~= nil and userCode:find('5') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Else Block",
                    "Description": "Create an if statement that checks if 8 is <b>less than</b> 3.\n\nIf it is, output the string <b>'Success'</b>\n\nOtherwise, output the string <b>'Failure'</b>",
                    "Hint": "You should use an else block, which is an extension to the if statement. The else block runs when no conditions in the if statement are met.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if log[#log].message:lower():find('failure') then return true end return false",
                    "ScriptValidator": "return userCode:find('<') ~= nil and userCode:find('8') ~= nil and userCode:find('3') ~= nil and userCode:find('else') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Elseif Block",
                    "Description": "Create an if statement with <b>at least</b> one <b>elseif</b> block, and one <b>else</b> block.\n\nFeel free to try this challenge multiple times, to try out different formats.\n\nRemember blocks underneath the first block with a truthy condition will be ignored.",
                    "Hint": "If any blocks within an if statement are truthy, the computer runs the code within its block and ignores the remaining blocks. Feel free to rewatch the tutorial if unsure.",
                    "Validator": "return true",
                    "ScriptValidator": "return userCode:find('if') ~= nil and userCode:find('else%s') ~= nil and userCode:find('elseif') ~= nil"
                },
                {
                    "Type": "Exercise",
                    "Title": "Local Variables",
                    "Description": "Create an if statement that executes, and declare a <b>local</b> variable named <font color=\"rgb(85,170,255)\">myVar</font> inside of its scope.\n\nThe variable should be assigned to the number <b>13</b>\n\nIn the if statement's scope, output the variable's value.\n\nOutside the if statement's scope after running, output the variable's value again, where it should not have a value.",
                    "Hint": "Local variables can only be accessed inside of a scope. If you declare a variable inside the if statement, it will not have a value outside of it, and so should output nil.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if myVar then return false end if log[#log-1].message:lower():find('13') and log[#log].message:lower():find('nil') then return true end return false",
                    "ScriptValidator": "return userCode:find('myVar') and not userCode:find('print(\\'') and not userCode:find('print(\"')"
                },
                {
                    "Type": "Quiz",
                    "Questions": [
                        {
                            "Question": "Which of these represents <b>less than or equal to</b>?",
                            "Answer": "&lt;=",
                            "False1": "&lt;",
                            "False2": "&gt;=",
                            "False3": "&gt;"
                        },
                        {
                            "Question": "What does the local keyword do?",
                            "Answer": "Makes a variable local to a specific scope",
                            "False1": "Makes a variable accessible from a LocalScript",
                            "False2": "Stops a variable from being accessed in other scripts",
                            "False3": "Nothing, it is entirely optional"
                        },
                        {
                            "Question": "What does this condition return?\n<font face=\"Code\">(3 == 3 or 4 &lt; 3) and true</font>",
                            "Answer": "true",
                            "False1": "false",
                            "False2": "nil",
                            "False3": "The script errors"
                        },
                        {
                            "Question": "When does the code within an else block run?",
                            "Answer": "When all other blocks in the if statement are falsy",
                            "False1": "After running the first code block in the if statement",
                            "False2": "Never",
                            "False3": "After running the code within an elseif block"
                        },
                        {
                            "Question": "Why do we use tabs/spaces to indent code?",
                            "Answer": "It makes the code easier to read",
                            "False1": "Scopes must be indented",
                            "False2": "Indentation makes the script run faster",
                            "False3": "I don't know"
                        }
                    ]
                }
            ]
        },
        {
            "Title": "Episode 3",
            "Subtitle": "Loops",
            "BackgroundImage": "http://www.roblox.com/asset/?id=9831217083",
            "GridPlacement": "003",
            "Template": "-- Before completing this exercise, please watch the episode below.\n-- Have feedback? Feel free to send me a tweet @ twitter.com/jotslo\n-- EPISODE 2: https://youtube.com/watch?v=abcdefghij\n\n",
            "Content": [
                {
                    "Type": "Exercise",
                    "Title": "For Loop #1",
                    "Description": "Using a <b>for loop</b>, write a script that outputs each value from <b>1</b> to <b>100</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.",
                    "Hint": "You can create a for loop ranging from 1 to 100. On each loop, the variable is incremented by the step value, which defaults to 1.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 99 do if log[#log-i] ~= 100 - i then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('for') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "For Loop #2",
                    "Description": "Using a <b>for loop</b>, write a script that outputs each value from <b>20 to </b>-20, with a step of <b>-2</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.",
                    "Hint": "You can create a for loop ranging from 20 to -20, with a third value representing the step of -2. On each loop, the variable is incremented by the step value, so the output should look like 20, 18, 16 ... -16, -18, -20",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 20 do if log[#log-i] ~= -20 + i * 2 then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('for') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "While Loop",
                    "Description": "Using a <b>variable</b> and a <b>while loop</b>, write a script that outputs each value from <b>1</b> to <b>100</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.\n\n<font color=\"rgb(255,0,0)\">Warning: Make sure your while loop doesn't run for an infinite amount of time, or Roblox Studio will hang.</font>",
                    "Hint": "An example of this challenge is given in the tutorial, incrementing a variable from 1 to 5. You should increment your variable until it reaches 100.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 99 do if log[#log-i] ~= 100 - i then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('while') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "Repeat Loop",
                    "Description": "Using a <b>variable</b> and a <b>repeat loop</b>, write a script that outputs each value from <b>0</b> to <b>50</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.\n\n<font color=\"rgb(255,0,0)\">Warning: Make sure your while loop doesn't run for an infinite amount of time, or Roblox Studio will hang.</font>",
                    "Hint": "An example of this challenge is given in the tutorial, incrementing a variable from 1 to 5. You should assign your variable to 0, and increment it until it reaches 50.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 50 do if log[#log-i] ~= 50 - i then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('while') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "Continue Keyword",
                    "Description": "Using any loop, output each value from <b>1</b> to <b>10</b>, but skip the number <b>5</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.",
                    "Hint": "You should use an if statement that checks the current value, and the continue keyword, which allows you to skip the current iteration of the loop. You can use the continue keyword inside any loop.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 4 do if log[#log-i] ~= 10 - i then return false end end for i = 6, 9 do if log[#log-(i-1)] ~= 10 - i then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('continue') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "Break Keyword",
                    "Description": "Write a <b>for loop</b> that outputs each value from <b>1</b> to <b>10</b>, but stop the for loop after the script has outputted <b>5</b>.\n\nYou may only use the <font color=\"rgb(85,170,255)\">print</font> keyword once in your script.",
                    "Hint": "You should use an if statement that checks the current value, and the break keyword, which allows you to break the loop and skip to the code underneath the block. You can use the break keyword inside any loop.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() for i = 0, 4 do if log[#log-i] ~= 5 - i then return false end end return true",
                    "ScriptValidator": "local _, count = userCode:gsub('print', '') return userCode:find('break') ~= nil and userCode:find('10') ~= nil and count == 1"
                },
                {
                    "Type": "Exercise",
                    "Title": "Do Block",
                    "Description": "Declare a <b>local</b> variable named <font color=\"rgb(85,170,255)\">myNum</font> inside a <b>do block</b>.\n\nThe variable should be assigned to the number <b>26</b>\n\nIn the do block's scope, output the variable's value.\n\nOutside the do blocks scope after running, output the variable's value again, where it should not have a value.",
                    "Hint": "Local variables can only be accessed inside of a scope. If you declare a variable inside the do block, it will not have a value outside of it, and so should output nil.",
                    "Validator": "wait() local log = game:GetService('LogService'):GetLogHistory() if myNum then return false end if log[#log-1].message:lower():find('26') and log[#log].message:lower():find('nil') then return true end return false",
                    "ScriptValidator": "return userCode:find('myNum') and not userCode:find('print(\\'') and not userCode:find('print(\"')"
                },
                {
                    "Type": "Quiz",
                    "Questions": [
                        {
                            "Question": "What does this script do?\n<font face=\"Code\">while 2 > 1 do print('hello!') end</font>",
                            "Answer": "Create an infinite loop, causing Roblox to hang",
                            "False1": "Outputs 'hello!' each frame",
                            "False2": "Causes an error",
                            "False3": "Outputs 'hello!' once, and then stops"
                        },
                        {
                            "Question": "Why is a do block useful?",
                            "Answer": "It creates a new scope for local variables",
                            "False1": "It runs code in a loop",
                            "False2": "It allows you to access variables in other scripts",
                            "False3": "They aren't useful"
                        },
                        {
                            "Question": "What does the third value given to the for loop represent?",
                            "Answer": "The step value",
                            "False1": "The target value",
                            "False2": "The starting value",
                            "False3": "There are only two values"
                        },
                        {
                            "Question": "Why would you use a repeat loop over a while loop?",
                            "Answer": "It runs the code block once, before checking the condition",
                            "False1": "You can't create an infinite loop",
                            "False2": "Repeat loops aren't useful",
                            "False3": "While loops don't run the code block multiple times"
                        },
                        {
                            "Question": "How do you exit a loop before finishing it?",
                            "Answer": "break",
                            "False1": "continue",
                            "False2": "exit",
                            "False3": "quit"
                        },
                        {
                            "Question": "How do you skip the remaining code block and go to the next iteration?",
                            "Answer": "continue",
                            "False1": "break",
                            "False2": "skip",
                            "False3": "cancel"
                        }
                    ]
                }
            ]
        }
    ]
}
